var input = File.ReadAllLines(Path.GetFullPath("input.txt"))[0];
//var input = "target area: x=20..30, y=-10..-5";

var a = input.Split(": ")[1];  // x=20..30, y=-10..-5
var pair = a.Split(", ");
var x = pair[0].Split("=")[1].Split("..").Select(p => int.Parse(p)).ToArray();
var y = pair[1].Split("=")[1].Split("..").Select(p => int.Parse(p)).ToArray();

var xList = new List<int>();
var outputX = 0;
while ((outputX * outputX + outputX) / 2 <= x[1])
{
    if ((outputX * outputX + outputX) / 2 >= x[0])
        xList.Add(outputX);
    outputX++;
}
outputX = xList.Max();
var outputY = Math.Abs(y[0]) - 1;

Console.WriteLine($"{(outputY * outputY + outputY) / 2 }");

// for x: max(n) for which x1 <= (n^2 + n) / 2 <= x2
// for y: abs(y2) - 1

// Find the largest X that lands in range a,b and output steps

// Find the largest Y that lands in range c,d in steps above

// x
// 6 5 4 3 2 1 = n^2 + n / 2 = 36 + 6 / 1= 42 / 2 = 21
// 7 6 5 4 3 2 1 = n^2 + n / 2 = 49 + 7 /2 = 56 /2 = 28

// y
// 
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// .....................#.........
// .....................#........
// ...............................
// .....................#......$..
// ...............................
// ...............................
// .....................#.....$$..
// ...............................
// ...............................
// ...............................
// ....................##...$..$..
// ...............................
// ...............................
// ...............................
// ...............................
// ..................#..#$.....$..
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............#..$..#......$..
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...........#.$.......#......$..
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ......#$.............#......$..
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// ...............................
// S....................#......$..
// ...............................
// ...............................
// ...............................
// ...............................
// ....................TTTTTTTTTTT
// ....................TTTTTTTTTT#
// ....................TTTTTTTTTTT
// ....................TTTTTTTTTTT
// ....................TTTTTTTTTTT
// ....................T#TTTTTT$TT